{"version":3,"sources":["ColorModeSwitcher.js","components/Navbar.jsx","components/Faq.jsx","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Navbar","toggleColorFlag","align","boxShadow","p","mb","Faq","index","setIndex","currentFaqId","setCurrentFaqId","direction","allowToggle","FAQ_LIST","map","faq","name","id","console","log","flex","textAlign","fontWeight","question","pb","answer","App","alanBtnInstance","useRef","useState","setToggleColorFlag","useEffect","current","alanBtn","key","onCommand","commandData","command","scroller","scrollTo","faqId","duration","delay","smooth","flag","theme","ReactDOM","render","document","getElementById"],"mappings":"ytFAIaA,EAAoB,SAAAC,GAAU,IACjCC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,aAAA,oBAAyBP,EAAzB,SACAQ,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASb,EACTc,KAAM,cAACV,EAAD,KACFL,KCfGgB,EAAS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACvB,OACE,eAAC,IAAD,CAAMC,MAAM,SAASC,UAAU,OAAOC,EAAE,IAAIC,GAAG,IAA/C,UACE,cAAC,IAAD,CAAKD,EAAE,IAAP,SACE,cAAC,IAAD,CAASZ,KAAK,KAAd,kCAEF,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,EAAD,CAAmBS,gBAAiBA,U,0BCE/BK,EAAM,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBACnD,OACE,eAAC,IAAD,CAAMC,UAAU,SAASP,EAAG,EAA5B,UACE,cAAC,IAAD,CAAKC,GAAG,IAAR,SACE,cAAC,IAAD,CAASb,KAAK,KAAd,0CAEF,cAAC,IAAD,CAAWoB,aAAW,EAACL,MAAOA,EAA9B,SACGM,EAASC,KAAI,SAAAC,GAAG,OACf,eAAC,IAAD,CAA4BC,KAAI,2BAAsBD,EAAIE,IAA1D,UACE,eAAC,IAAD,CACEnB,QAAS,WACHiB,EAAIE,KAAOR,GACbS,QAAQC,IAAI,QACZT,EAAgB,MAChBF,EAAS,QAETE,EAAgBK,EAAIE,IACpBT,EAASO,EAAIE,GAAK,KARxB,UAYE,cAAC,IAAD,CAAKG,KAAK,IAAIC,UAAU,OAAxB,SACE,cAAC,IAAD,CAAMC,WAAW,WAAjB,SAA6BP,EAAIQ,aAEnC,cAAC,IAAD,OAEF,cAAC,IAAD,CAAgBC,GAAI,EAApB,SAAwBT,EAAIU,WAlBVV,EAAIE,a,yBCfrBS,EAAM,WACjB,IAAMC,EAAkBC,iBAAO,MADR,EAEGC,mBAAS,MAFZ,mBAEhBtB,EAFgB,KAETC,EAFS,OAGiBqB,mBAAS,MAH1B,mBAGhBpB,EAHgB,KAGFC,EAHE,OAIuBmB,oBAAS,GAJhC,mBAIhB5B,EAJgB,KAIC6B,EAJD,KA4BvB,OAtBAC,qBAAU,WACHJ,EAAgBK,UACnBL,EAAgBK,QAAUC,IAAQ,CAChCC,IACE,yEACFC,UAAW,SAAAC,GACmB,YAAxBA,EAAYC,SACdC,WAASC,SAAT,2BAAsCH,EAAYI,OAAS,CACzDC,SAAU,IACVC,MAAO,EACPC,OAAQ,mBAEVnC,EAAS4B,EAAYI,MAAQ,GAC7B9B,EAAgB0B,EAAYI,QACK,oBAAxBJ,EAAYC,SACrBP,GAAmB,SAAAc,GAAI,OAAKA,WAKnC,IAGD,eAAC,IAAD,CAAgBC,MAAOA,IAAvB,UACE,cAAC,EAAD,CAAQ5C,gBAAiBA,IACzB,cAAC,EAAD,CACEM,MAAOA,EACPC,SAAUA,EACVC,aAAcA,EACdC,gBAAiBA,QCrCzBoC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.375ffbb6.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\r\nimport { Box, Flex, Heading, Spacer } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\r\n\r\nexport const Navbar = ({ toggleColorFlag }) => {\r\n  return (\r\n    <Flex align=\"center\" boxShadow=\"base\" p=\"2\" mb=\"2\">\r\n      <Box p=\"2\">\r\n        <Heading size=\"lg\">E-commerce Support</Heading>\r\n      </Box>\r\n      <Spacer />\r\n      <Box>\r\n        <ColorModeSwitcher toggleColorFlag={toggleColorFlag} />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  AccordionIcon,\r\n} from '@chakra-ui/react';\r\nimport FAQ_LIST from '../faq.json';\r\n\r\nexport const Faq = ({ index, setIndex, currentFaqId, setCurrentFaqId }) => {\r\n  return (\r\n    <Flex direction=\"column\" p={4}>\r\n      <Box mb=\"8\">\r\n        <Heading size=\"md\">Frequently Asked Questions</Heading>\r\n      </Box>\r\n      <Accordion allowToggle index={index}>\r\n        {FAQ_LIST.map(faq => (\r\n          <AccordionItem key={faq.id} name={`accordion-button-${faq.id}`}>\r\n            <AccordionButton\r\n              onClick={() => {\r\n                if (faq.id === currentFaqId) {\r\n                  console.log('True');\r\n                  setCurrentFaqId(null);\r\n                  setIndex(null);\r\n                } else {\r\n                  setCurrentFaqId(faq.id);\r\n                  setIndex(faq.id - 1);\r\n                }\r\n              }}\r\n            >\r\n              <Box flex=\"1\" textAlign=\"left\">\r\n                <Text fontWeight=\"semibold\">{faq.question}</Text>\r\n              </Box>\r\n              <AccordionIcon />\r\n            </AccordionButton>\r\n            <AccordionPanel pb={4}>{faq.answer}</AccordionPanel>\r\n          </AccordionItem>\r\n        ))}\r\n      </Accordion>\r\n    </Flex>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport { Navbar } from './components/Navbar';\nimport { Faq } from './components/Faq';\nimport alanBtn from '@alan-ai/alan-sdk-web';\nimport { scroller } from 'react-scroll';\n\nexport const App = () => {\n  const alanBtnInstance = useRef(null);\n  const [index, setIndex] = useState(null);\n  const [currentFaqId, setCurrentFaqId] = useState(null);\n  const [toggleColorFlag, setToggleColorFlag] = useState(false);\n\n  useEffect(() => {\n    if (!alanBtnInstance.current) {\n      alanBtnInstance.current = alanBtn({\n        key:\n          'a36017839b1514721a296acc6896c8ab2e956eca572e1d8b807a3e2338fdd0dc/stage',\n        onCommand: commandData => {\n          if (commandData.command === 'gotoFaq') {\n            scroller.scrollTo(`accordion-button-${commandData.faqId}`, {\n              duration: 800,\n              delay: 0,\n              smooth: 'easeInOutQuart',\n            });\n            setIndex(commandData.faqId - 1);\n            setCurrentFaqId(commandData.faqId);\n          } else if (commandData.command === 'toggleColorMode') {\n            setToggleColorFlag(flag => !flag);\n          }\n        },\n      });\n    }\n  }, []);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Navbar toggleColorFlag={toggleColorFlag} />\n      <Faq\n        index={index}\n        setIndex={setIndex}\n        currentFaqId={currentFaqId}\n        setCurrentFaqId={setCurrentFaqId}\n      />\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}